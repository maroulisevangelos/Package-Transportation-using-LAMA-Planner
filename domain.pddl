(define (domain assignment3)
	(:requirements :strips)
	(:predicates 
		(at ?x ?y)
		(in ?x ?y)
		(on ?x ?y)
		(loaded ?x)
		(unloaded ?x)
		(connected ?x ?y)
		(free ?x)
		(is_country ?x)
		(is_city ?x)
		(is_location ?x)
		(is_port ?x)
		(is_ship ?x)
		(is_truck ?x)
		(is_locomotive ?x)
		(is_wagon ?x)
		(is_package ?x)
	)

	(:action move-truck
		:parameters (?from ?to ?from_city ?to_city ?truck ?country)
		:precondition (and (is_location ?from)
							(is_location ?to)
							(is_city ?from_city)
							(is_city ?to_city)
							(is_truck ?truck)
							(is_country ?country)
							(at ?truck ?from)
							(in ?from ?from_city)
							(in ?to ?to_city)
							(in ?from_city ?country)
							(in ?to_city ?country))
		:effect  (and (at ?truck ?to)
						(not (at ?truck ?from)))
	)
	(:action load_truck
		:parameters (?location ?package ?truck)
		:precondition (and (is_location ?location)
							(is_package ?package)
							(is_truck ?truck)
							(at ?package ?location)
							(at ?truck ?location)
							(unloaded ?truck))
		:effect (and (loaded ?truck)
						(on ?package ?truck)
						(not (unloaded ?truck))
						(not (at ?package ?location)))
	)
	(:action unload_truck
		:parameters (?location ?package ?truck)
		:precondition (and (is_location ?location)
							(is_package ?package)
							(is_truck ?truck) 
							(at ?truck ?location)
							(on ?package ?truck)
							(loaded ?truck))
		:effect (and (unloaded ?truck)
						(at ?package ?location)
						(not (on ?package ?truck))
						(not (loaded ?truck)))
	)
	(:action move-ship
		:parameters (?from ?to ?ship)
		:precondition (and (is_port ?from)
							(is_port ?to)
							(is_ship ?ship)
							(at ?ship ?from))
		:effect	(and (at ?ship ?to)
						(not (at ?ship ?from)))
	)
	(:action load_ship
		:parameters (?location ?package ?ship)
		:precondition (and (is_location ?location)
							(is_package ?package)
							(is_ship ?ship)
							(at ?package ?location)
							(at ?ship ?location))
		:effect (and (loaded ?ship)
						(on ?package ?ship)
						(not (at ?package ?location)))
	)
	(:action unload_ship
		:parameters (?location ?package ?ship)
		:precondition (and (is_location ?location)
							(is_package ?package)
							(is_ship ?ship)
							(at ?ship ?location)
							(on ?package ?ship)
							(loaded ?ship))
		:effect (and (unloaded ?ship)
						(at ?package ?location)
						(not (on ?package ?ship))
						(not (loaded ?ship)))
	)
	(:action load_wagon
		:parameters (?location ?package ?wagon)
		:precondition (and (is_location ?location)
							(is_package ?package)
							(is_wagon ?wagon)
							(at ?package ?location)
							(at ?wagon ?location)
							(unloaded ?wagon))
		:effect (and (loaded ?wagon)
						(on ?package ?wagon)
						(not (unloaded ?wagon))
						(not (at ?package ?location)))
	)
	(:action unload_wagon
		:parameters (?location ?package ?wagon)
		:precondition (and (is_location ?location)
							(is_package ?package)
							(is_wagon ?wagon)
							(at ?wagon ?location)
							(on ?package ?wagon)
							(loaded ?wagon))
		:effect (and (unloaded ?wagon)
						(at ?package ?location)
						(not (on ?package ?wagon))
						(not (loaded ?wagon)))
	)
	(:action move-wagon
		:parameters (?from ?to ?wagon ?locomotive)
		:precondition (and (is_location ?from)
							(is_location ?to)
							(is_wagon ?wagon)
							(is_locomotive ?locomotive)
							(at ?wagon ?from)
							(at ?locomotive ?to)
							(connected ?wagon ?locomotive))
		:effect  (and (at ?wagon ?to)
						(not (at ?wagon ?from)))
	)
	(:action move-locomotive
		:parameters (?from ?to ?locomotive)
		:precondition (and (is_location ?from)
							(is_location ?to)
							(is_locomotive ?locomotive) 
							(at ?locomotive ?from))
		:effect	(and (at ?locomotive ?to)
						(not (at ?locomotive ?from)))
	)
	(:action connect
		:parameters (?wagon ?locomotive ?location)
		:precondition (and (is_location ?location)
							(is_wagon ?wagon)
							(is_locomotive ?locomotive) 
							(free ?wagon)
							(at ?wagon ?location)
							(at ?locomotive ?location))
		:effect	(and (connected ?wagon ?locomotive)
						(not (free ?wagon)))
	)
	(:action unconnect
		:parameters (?wagon ?locomotive ?location)
		:precondition (and (is_location ?location)
							(is_wagon ?wagon)
							(is_locomotive ?locomotive)
							(connected ?wagon ?locomotive)
							(at ?wagon ?location)
							(at ?locomotive ?location))
		:effect	(and (free ?wagon)
						(not (connected ?wagon ?locomotive)))
	)
)